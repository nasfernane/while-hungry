image: node:17

variables:
  NODE_ENV: $CI_COMMIT_REF_NAME
  PORT: $PORT
  DATABASE_URL: $CI_COMMIT_REF_NAME
  SHADOW_DATABASE_URL: $CI_COMMIT_REF_NAME
  ACCESS_TOKEN_SECRET: $CI_COMMIT_REF_NAME
  GIT_DEPTH: 5
  WH_DOCKER_IMAGE: $CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA
  WH_DOCKER_HOST: gcr.io
 

stages:
  - setup
  # - lint
  - build
  - dockerize
  - deploy

cache: &global_cache
  paths:
    - node_modules/
    - .env
  policy: pull


install:
  stage: setup
  interruptible: true
  only:
    - main
    - merge_requests
  cache:
    <<: *global_cache
    #overide the policy
    policy: pull-push
  script:
    - yarn install
  artifacts:
    paths:
      - node_modules

#lint stages
# lint api:
#   stage: lint
#   script:
#     - yarn lint:api

# lint school:
#   stage: lint
#   script:
#     - yarn lint:client

build wh:
  stage: build
  script:
    - yarn build:client
  artifacts:
    paths:
      - dist/while-hungry
    expire_in: 50 minutes

build api:
  stage: build
  script:
    - yarn build:api
  artifacts:
    paths:
      - dist/api
    expire_in: 50 minutes

generate image:
  stage: dockerize
  image: docker:20.10.12
  dependencies:
    - build wh
    - build api
  services:
    - docker:20.10.12-dind
  before_script:
    - echo $WH_GCP_KEY_JSON | base64 -d > /tmp/key.json
    - docker login -u _json_key --password-stdin https://$WH_DOCKER_HOST < /tmp/key.json
    - export WH_GCP_REG="${WH_DOCKER_HOST}/${WH_GCP_PROJECT_ID}/${CI_COMMIT_REF_NAME}"
  script:
    - docker build -t $WH_DOCKER_IMAGE .
    - docker tag $WH_DOCKER_IMAGE $WH_GCP_REG
    - docker push $WH_GCP_REG
  after_script:
    - rm /tmp/key.json
  only:
    - main

deploy:
  image: google/cloud-sdk:alpine
  stage: deploy
  cache: {}
  dependencies: []
  before_script:
    - echo $WH_GCP_KEY_JSON | base64 -d > /tmp/key.json
    - export WH_GCP_REG="${WH_DOCKER_HOST}/${WH_GCP_PROJECT_ID}/${CI_COMMIT_REF_NAME}:latest"
    - export WH_DEPLOY_NAME="wh-${CI_COMMIT_REF_name}"
  script:
    - gcloud auth activate-service-account --key-file /tmp/key.json --project=$WH_GCP_PROJECT_ID
    - gcloud config set project $WH_GCP_PROJECT_ID
    - gcloud config set compute/zone $WH_GCP_DEPLOY_ZONE
    - result=$(gcloud compute instances list | grep -q $WH_DEPLOY_NAME; echo $?)
    - > 
      if [ $result == 0 ]; then
        gcloud compute instances update-container $WH_DEPLOY_NAME --container-image $WH_GCP_REG
      else 
        gcloud compute instances create $WH_DEPLOY_NAME --source-instance-template $WH_COMMIT_REF_NAME
      fi
  after_script:
    - rm /tmp/key.json
  only:
    - main








