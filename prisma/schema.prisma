datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(60)
  password  String   @db.VarChar(60)
  nickname  String   @unique @db.VarChar(30)
  role      Role     @default(User)
  avatar    String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recipies        Recipe[]
  claps           Clap[]           @relation("clapper")
  clapped         Clap[]           @relation("clapped")
  posts           Post[]
  postComments    PostComment[]
  recipeComments  RecipeComment[]
  recipeReviews   RecipeReview[]
  recipeFavorites RecipeFavorite[]

}

model Recipe {
  id          Int        @id @default(autoincrement())
  authorId    Int
  name        String     @db.VarChar(60)
  picture     String?
  difficulty  Difficulty
  cookTime    Int
  serves      Int
  description String
  unit        String
  avgReview   Decimal?   @db.Decimal(10, 1)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  recipeInstructions  RecipeInstruction[]
  recipeNotes         RecipeNote[]
  requiredIngredients RequiredIngredient[]
  requiredUstensils   RequiredUstensil[]
  recipeComments      RecipeComment[]
  recipeReviews       RecipeReview[]
  recipeTags          RecipeTag[]
  recipeFavorites     RecipeFavorite[]

  author User @relation(fields: [authorId], references: [id])
}

model RecipeInstruction {
  id          Int     @id @default(autoincrement())
  recipeId    Int
  categoryId  Int
  label       String?
  instruction String

  recipe   Recipe                    @relation(fields: [recipeId], references: [id])
  category RecipeInstructionCategory @relation(fields: [categoryId], references: [id])
}

model RecipeInstructionCategory {
  id   Int    @id @default(autoincrement())
  name String

  recipeInstructions RecipeInstruction[]
}

model RecipeNote {
  id       Int    @id @default(autoincrement())
  recipeId Int
  label    String
  note     String

  recipe Recipe @relation(fields: [recipeId], references: [id])
}

model RecipeFavorite {
  id        Int      @id @default(autoincrement())
  recipeId  Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recipe Recipe @relation(fields: [recipeId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model RecipeComment {
  id        Int      @id @default(autoincrement())
  recipeId  Int
  userId    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Recipe Recipe @relation(fields: [recipeId], references: [id])
  author User   @relation(fields: [userId], references: [id])
}

model RecipeReview {
  id        Int      @id @default(autoincrement())
  recipeId  Int
  authorId  Int
  review    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recipe Recipe @relation(fields: [recipeId], references: [id])
  author User   @relation(fields: [authorId], references: [id])
}

model RecipeTag {
  id        Int      @id @default(autoincrement())
  recipeId  Int
  tagId     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recipe Recipe        @relation(fields: [recipeId], references: [id])
  tag    RecipeTagList @relation(fields: [tagId], references: [id])
}

model RecipeTagList {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(25)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  RecipeTag RecipeTag[]
}

model Ingredient {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(25)
  picture     String?  @db.VarChar(255)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  requiredIngredient RequiredIngredient[]
}

model RequiredIngredient {
  id           Int      @id @default(autoincrement())
  recipeId     Int
  ingredientId Int
  quantity     Int
  unit         String   @db.VarChar(15)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Recipe     Recipe     @relation(fields: [recipeId], references: [id])
  Ingredient Ingredient @relation(fields: [ingredientId], references: [id])
}

model Ustensil {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(30)
  description String?
  picture     String?  @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  requiredUstensil RequiredUstensil[]
}

model RequiredUstensil {
  id         Int      @id @default(autoincrement())
  recipeId   Int
  ustensilId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Recipe   Recipe   @relation(fields: [recipeId], references: [id])
  Ustensil Ustensil @relation(fields: [ustensilId], references: [id])
}

model Post {
  id        Int      @id @default(autoincrement())
  authorId  Int
  title     String   @db.VarChar(255)
  content   String   @db.LongText
  published Boolean  @default(false)
  picture   String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postComments PostComment[]

  author User @relation(fields: [authorId], references: [id])
}

model PostComment {
  id        Int      @id @default(autoincrement())
  postId    Int
  authorId  Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post @relation(fields: [postId], references: [id])
  author User @relation(fields: [authorId], references: [id])
}

model Clap {
  id        Int      @id @default(autoincrement())
  clapperId Int
  clappedId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clapper User @relation("clapper", fields: [clapperId], references: [id])
  clapped User @relation("clapped", fields: [clappedId], references: [id])
}

enum Role {
  Creator  @map("Creator")
  Admin    @map("Admin")
  Moderator    @map("Moderator")
  User     @map("User")
}

enum Difficulty {
  Easy    @map("Easy")
  Medium  @map("Medium")
  Hard    @map("Hard")
}
